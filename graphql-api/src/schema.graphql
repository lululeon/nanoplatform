"""All input for the create `Unbuilt` mutation."""
input CreateUnbuiltInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Unbuilt` to be created by this mutation."""
  unbuilt: UnbuiltInput!
}

"""The output of our create `Unbuilt` mutation."""
type CreateUnbuiltPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Unbuilt` that was created by this mutation."""
  unbuilt: Unbuilt

  """An edge for our `Unbuilt`. May be used by Relay 1."""
  unbuiltEdge(
    """The method to use when ordering `Unbuilt`."""
    orderBy: [UnbuiltsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UnbuiltsEdge

  """Reads a single `User` that is related to this `Unbuilt`."""
  userByOriginator: User
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was created by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteUnbuiltByNodeId` mutation."""
input DeleteUnbuiltByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Unbuilt` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUnbuilt` mutation."""
input DeleteUnbuiltInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Unbuilt` mutation."""
type DeleteUnbuiltPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUnbuiltNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Unbuilt` that was deleted by this mutation."""
  unbuilt: Unbuilt

  """An edge for our `Unbuilt`. May be used by Relay 1."""
  unbuiltEdge(
    """The method to use when ordering `Unbuilt`."""
    orderBy: [UnbuiltsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UnbuiltsEdge

  """Reads a single `User` that is related to this `Unbuilt`."""
  userByOriginator: User
}

"""All input for the `deleteUserByNodeId` mutation."""
input DeleteUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUserByUsername` mutation."""
input DeleteUserByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  username: String!
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was deleted by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Unbuilt`."""
  createUnbuilt(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUnbuiltInput!
  ): CreateUnbuiltPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Deletes a single `Unbuilt` using a unique key."""
  deleteUnbuilt(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUnbuiltInput!
  ): DeleteUnbuiltPayload

  """Deletes a single `Unbuilt` using its globally unique id."""
  deleteUnbuiltByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUnbuiltByNodeIdInput!
  ): DeleteUnbuiltPayload

  """Deletes a single `User` using a unique key."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByNodeIdInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByUsernameInput!
  ): DeleteUserPayload

  """Updates a single `Unbuilt` using a unique key and a patch."""
  updateUnbuilt(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUnbuiltInput!
  ): UpdateUnbuiltPayload

  """Updates a single `Unbuilt` using its globally unique id and a patch."""
  updateUnbuiltByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUnbuiltByNodeIdInput!
  ): UpdateUnbuiltPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByNodeIdInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByUsername(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByUsernameInput!
  ): UpdateUserPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
  unbuilt(id: UUID!): Unbuilt

  """Reads a single `Unbuilt` using its globally unique `ID`."""
  unbuiltByNodeId(
    """The globally unique `ID` to be used in selecting a single `Unbuilt`."""
    nodeId: ID!
  ): Unbuilt

  """Reads and enables pagination through a set of `Unbuilt`."""
  unbuilts(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UnbuiltCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Unbuilt`."""
    orderBy: [UnbuiltsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UnbuiltsConnection
  user(id: UUID!): User

  """Reads a single `User` using its globally unique `ID`."""
  userByNodeId(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User
  userByUsername(username: String!): User

  """Reads and enables pagination through a set of `User`."""
  users(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersConnection
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

type Unbuilt implements Node {
  createdAt: Datetime!
  currentStatus: String!
  elevatorPitch: String
  id: UUID!
  logoUrl: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  openSource: Boolean!
  originator: UUID!
  tags: [String]
  title: String!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `Unbuilt`."""
  userByOriginator: User
}

"""
A condition to be used against `Unbuilt` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UnbuiltCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `currentStatus` field."""
  currentStatus: String

  """Checks for equality with the object’s `elevatorPitch` field."""
  elevatorPitch: String

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `logoUrl` field."""
  logoUrl: String

  """Checks for equality with the object’s `openSource` field."""
  openSource: Boolean

  """Checks for equality with the object’s `originator` field."""
  originator: UUID

  """Checks for equality with the object’s `tags` field."""
  tags: [String]

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""An input for mutations affecting `Unbuilt`"""
input UnbuiltInput {
  createdAt: Datetime
  currentStatus: String!
  elevatorPitch: String
  id: UUID
  logoUrl: String
  openSource: Boolean
  originator: UUID!
  tags: [String]
  title: String!
  updatedAt: Datetime
}

"""
Represents an update to a `Unbuilt`. Fields that are set will be updated.
"""
input UnbuiltPatch {
  createdAt: Datetime
  currentStatus: String
  elevatorPitch: String
  id: UUID
  logoUrl: String
  openSource: Boolean
  originator: UUID
  tags: [String]
  title: String
  updatedAt: Datetime
}

"""A connection to a list of `Unbuilt` values."""
type UnbuiltsConnection {
  """
  A list of edges which contains the `Unbuilt` and cursor to aid in pagination.
  """
  edges: [UnbuiltsEdge!]!

  """A list of `Unbuilt` objects."""
  nodes: [Unbuilt!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Unbuilt` you could get from the connection."""
  totalCount: Int!
}

"""A `Unbuilt` edge in the connection."""
type UnbuiltsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Unbuilt` at the end of the edge."""
  node: Unbuilt!
}

"""Methods to use when ordering `Unbuilt`."""
enum UnbuiltsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  CURRENT_STATUS_ASC
  CURRENT_STATUS_DESC
  ELEVATOR_PITCH_ASC
  ELEVATOR_PITCH_DESC
  ID_ASC
  ID_DESC
  LOGO_URL_ASC
  LOGO_URL_DESC
  NATURAL
  OPEN_SOURCE_ASC
  OPEN_SOURCE_DESC
  ORIGINATOR_ASC
  ORIGINATOR_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TAGS_ASC
  TAGS_DESC
  TITLE_ASC
  TITLE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""All input for the `updateUnbuiltByNodeId` mutation."""
input UpdateUnbuiltByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Unbuilt` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Unbuilt` being updated.
  """
  patch: UnbuiltPatch!
}

"""All input for the `updateUnbuilt` mutation."""
input UpdateUnbuiltInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `Unbuilt` being updated.
  """
  patch: UnbuiltPatch!
}

"""The output of our update `Unbuilt` mutation."""
type UpdateUnbuiltPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Unbuilt` that was updated by this mutation."""
  unbuilt: Unbuilt

  """An edge for our `Unbuilt`. May be used by Relay 1."""
  unbuiltEdge(
    """The method to use when ordering `Unbuilt`."""
    orderBy: [UnbuiltsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UnbuiltsEdge

  """Reads a single `User` that is related to this `Unbuilt`."""
  userByOriginator: User
}

"""All input for the `updateUserByNodeId` mutation."""
input UpdateUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""All input for the `updateUserByUsername` mutation."""
input UpdateUserByUsernameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
  username: String!
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was updated by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

type User implements Node {
  avatarUrl: String
  createdAt: Datetime!
  id: UUID!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `Unbuilt`."""
  unbuiltsByOriginator(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UnbuiltCondition

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Unbuilt`."""
    orderBy: [UnbuiltsOrderBy!] = [PRIMARY_KEY_ASC]
  ): UnbuiltsConnection!
  updatedAt: Datetime!
  username: String!
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `avatarUrl` field."""
  avatarUrl: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `username` field."""
  username: String
}

"""An input for mutations affecting `User`"""
input UserInput {
  avatarUrl: String
  createdAt: Datetime
  id: UUID
  updatedAt: Datetime
  username: String!
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  avatarUrl: String
  createdAt: Datetime
  id: UUID
  updatedAt: Datetime
  username: String
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  AVATAR_URL_ASC
  AVATAR_URL_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USERNAME_ASC
  USERNAME_DESC
}
